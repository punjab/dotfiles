# Create a new directory and enter it
function mkd() {
        mkdir -p "$@" && cd "$@"
}

# Determine size of a file or total size of a directory
function fs() {
        if du -b /dev/null > /dev/null 2>&1; then
                local arg=-sbh
        else
                local arg=-sh
        fi
        if [[ -n "$@" ]]; then
                du $arg -- "$@"
        else
                du $arg .[^.]* *
        fi
}

# Get a character’s Unicode code point
function codepoint() {
        perl -e "use utf8; print sprintf('U+%04X', ord(\"$@\"))"
        # print a newline unless we’re piping the output to another program
        if [ -t 1 ]; then
                echo # newline
        fi
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames() {
        if [ -z "${1}" ]; then
                echo "ERROR: No domain specified."
                return 1
        fi

        local domain="${1}"
        echo "Testing ${domain}…"
        echo # newline

        local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
                | openssl s_client -connect "${domain}:443" 2>&1);

        if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
                local certText=$(echo "${tmp}" \
                        | openssl x509 -text -certopt "no_header, no_serial, no_version, \
                        no_signame, no_validity, no_issuer, no_pubkey, no_sigdump, no_aux");
                        echo "Common Name:"
                        echo # newline
                        echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//";
                        echo # newline
                        echo "Subject Alternative Name(s):"
                        echo # newline
                        echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
                                | sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2
                        return 0
        else
                echo "ERROR: Certificate not found.";
                return 1
        fi
}

# Convert a ESRI shapefile to PostGIS table
function shp2pgis(){
  # $1 from_srid:to_srid e.g 2227:3857
  # Check your shape file's srid here http://prj2epsg.org/search
  # $2 should be path to .shp file
  # $3 should be schema e.g. usa.landuse
  # $4 should be name of the psql database to import to
  shp2pgsql -I -s $1 $2 $3 | psql -p 5432 -d $4
}

# Functions for creating python named asdf environments with virtualenv
mkenv(){
    virtualenv -p $(asdf where python "$1")/bin/python "$WORKON_HOME"/"$2"
}

workon(){
    source "$WORKON_HOME"/"$1"/bin/activate
    [ -d "$PROJECT_HOME"/"$1" ] && cd "$PROJECT_HOME"/"$1"
}
